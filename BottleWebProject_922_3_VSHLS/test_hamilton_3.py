import unittest
import routes
import numpy as np

class Test_test_hamilton_3(unittest.TestCase):
    def test_A(self):
        #массив для проверки работы метода в целом
        non_hamiltonian_matrix = ["101;010;100", "101;010;101", "01;01", "010;011;000",
                                  "011;100;100", "000;111;100", "000;000;000", "011;000;1000",
                                  "0101;0001;0001", "1000;0010;0001", "10001;0001;1000",
                                  "0001;1000;1000", "10000;010101;10010", "1001;0001;0011", "111;000;111",
                                  "011;001;001", "010;000;100", "000;100;000", "000;100;010", "00;00",
                                  "010;000;000", "11;00", "1110;0001;1001;0001", "0111;0011;0001;0000",
                                  "0001;0000;0000;0000", "0101;0101;0101;0101", "1001;0101;0001;1000",
                                  "01000;00000;10000;01101;10000", "10;01", "001;000;111",
                                  "000;110;001", "010;100;011", "000;100;110", "0001;1000;1000;0011",
                                  "10100;00110;10000;01000;11001", "01000;10000;10000;10000;10000",
                                  "1011;0001;1000;1100"]
        #массив для проверки работы метода на больших данных
        non_hamiltonian_great_matrix = ["1010101;0010010;0010101;0101010;0101111;0100010;0110111",
                                        "000000000000000;101000000000000;000000001000011;010100101000010;010010010100010;001000100100101;011010100110011;011001000010010;100101000100000;100000100010100;100100101001010;011010100100001;100110001011100;000100000011100;100111001100000",
                                        "000000000000000;101000000000010;000010001000010;010100101000010;010010010100000;001000100100101;011010100110011;011001000011110;100101110100000;000011100010100;100100101001010;011010100100001;100110001011100;000100000011100;100111001100000",
                                        "100000000000000;101000001100010;000010001000010;010100101000010;010010010100000;001000000100101;011010100010000;011001000011110;100101110100000;100011000010100;100100101001010;001010000100001;100110001011100;000100000010000;100111001000111",
                                        "100000000000000;101000001100011;110010001000010;010111101000010;010010010111000;001000000100100;011010000010000;011001011011110;100101110100110;100011110010100;000000101001011;001010000100001;100100001011100;000100000010000;000111001000111"]
        
        for matrix in non_hamiltonian_matrix:      
            path = routes.Hamilton(routes.str_to_arr(matrix), np.empty(len(routes.str_to_arr(matrix)),dtype=int))
            self.assertEqual(path.hamiltonianCycle(), "No hamiltonian cycle for that graph!")

        #for matrix in non_hamiltonian_great_matrix:
        #    path1 = routes.Hamilton(routes.str_to_arr(matrix), np.empty(len(routes.str_to_arr(matrix)),dtype=int))        
        #    self.assertEqual(path1.hamiltonianCycle(), "No hamiltonian cycle for that graph!")

if __name__ == '__main__':
    unittest.main()
